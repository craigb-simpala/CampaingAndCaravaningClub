/**
 * This class contains unit tests for validating the behavior of Apex classes
 * and triggers.
 *
 * Unit tests are class methods that verify whether a particular piece
 * of code is working properly. Unit test methods take no arguments,
 * commit no data to the database, and are flagged with the testMethod
 * keyword in the method definition.
 *
 * All test methods in an organization are executed whenever Apex code is deployed
 * to a production organization to confirm correctness, ensure code
 * coverage, and prevent regressions. All Apex classes are
 * required to have at least 75% code coverage in order to be deployed
 * to a production organization. In addition, all triggers must have some code coverage.
 * 
 * The @isTest class annotation indicates this class only contains test
 * methods. Classes defined with the @isTest annotation do not count against
 * the organization size limit for all Apex scripts.
 *
 * See the Apex Language Reference for more information about Testing and Code Coverage.
 */
@isTest
global class ValidateBankDetailsTest implements WebServiceMock{global void doInvoke(
           Object stub,
           Object request,
           Map<String, Object> response,
           String endpoint,
           String soapAction,
           String requestName,
           String responseNS,
           String responseName,
           String responseType) {
        // Create response element from the autogenerated class.
        // Populate response element.
        // Add response element to the response parameter, as follows:
        //response.put('response_x', responseElement);
   }
	

    static testMethod void ValidateBankDetailsTest() {
        // TO DO: implement unit test
        
          
      /* Account acc = new Account (Name = 'Patel', BillingPostalCode='M50 2ZY', BillingCity='Manchester', BillingState='United Kingdom');
       insert acc;
       
      Test.setCurrentPage(Page.ValidateBankDetails);
      ValidateBankDetails controller = new ValidateBankDetails(new ApexPages.StandardController(acc));
      
      
      
      Map<Integer,hopewiserSoapaddrsvr.addressMatchType> hpamtMap = new Map<Integer,hopewiserSoapaddrsvr.addressMatchType>();
       hopewiserSoapaddrsvr.addressMatchType hpamt = new hopewiserSoapaddrsvr.addressMatchType();
       hopewiserSoapaddrsvr.addressType addr = new hopewiserSoapaddrsvr.addressType();
       addr.Line1 = '4';
       addr.Line2 = 'Carolina Way';
       addr.Line3 = 'Quays Reach';
       addr.Line4 = 'M50 2ZY';
       addr.Town = 'Manchester';
       hpamt.Address = addr;
       hpamtMap.put(5, hpamt);
       hopewiserSoapaddrsvr.addressMatchType hpamt2 = new hopewiserSoapaddrsvr.addressMatchType();
       hopewiserSoapaddrsvr.addressType addr2 = new hopewiserSoapaddrsvr.addressType();
       addr2.Line1 = '3';
       addr2.Line2 = 'Carolina Way';
       addr2.Line3 = 'Quays Reach';
       addr2.Postcode = 'M50 2ZY';
       addr2.Line5 = 'Manchester';
       addr2.Town = 'Greater Manchester';
       addr2.County = 'U.K';
       hpamt2.Address = addr2;
       hpamtMap.put(0, hpamt2);
       controller.seladdr = '0';
       controller.addMatch = hpamtMap;
       
      String selAddr = controller.selAddr;
      Map<Integer,hopewiserSoapaddrsvr.addressMatchType> addMatch = controller.addMatch;
      PageReference validate = controller.validate();
      PageReference updateAddress = controller.updateAddress();
      
      
      controller.addMatch = new Map<Integer,hopewiserSoapaddrsvr.addressMatchType>();
      List<SelectOption> addressOptions = controller.addressOptions;*/
    }
}