/**
 * @description       : 
 * @author            : Unknown
 * @group             : 
 * @last modified on  : 17-03-2022
 * @last modified by  : Kev Cadger (kevin.cadger@wipro.com)
 * Modifications Log
 * Ver   Date         Author                        Request                         Modification
 * 1.0   22-02-2022   Unknown                                                       Initial Version
 * 1.1   01-03-2022   Kev Cadger (Wipro)            REQ-000109128                   Updated the validation for all functions using the Hopewiser API.
**/

public with sharing class ReinstateMembershipController {

    public apexpages.standardController controller {get; set;}
    public Integer wizardStep {get;set;}
    public String errorMsg {get;set;}
    public Lead lea {get;set;}
    public Account acc {get;set;}
    public constants sc = new constants();
    
    public pagereference setupLead(){
        lea.LastName = this.acc.id;
        lea.Company = this.acc.id;
        lea.Status = 'Open';
        lea.payment_method__c = acc.payment_method2__c;
        lea.Email = cPrimaryMember.Email;
        lea.Membership_Code__c = this.acc.Membership_Code__r.name;
        lea.street=this.acc.billingstreet; 
        lea.postalcode=this.acc.billingpostalcode;
        lea.city=this.acc.billingcity;
        lea.country=this.acc.billingcountry;
        lea.state=this.acc.billingstate;
        
        
        if(this.acc.Membership_Status__c != 'Lapsed' && this.acc.Membership_Status__c != 'Ex-Member' && this.acc.Membership_Status__c != 'Non-Renewer' && this.acc.Membership_Status__c != 'Cancelled'){
           wizardstep=0;
           errorMsg = 'This Membership has not been cancelled';
        }
        
        system.debug(lea);
        


        if(lea.Associate_Member_Date_of_Birth__c!=null)MemberABday = lea.Associate_Member_Date_of_Birth__c.format();
        List<String> omsections = new List<String>();
        List<Club_Opportunity_Product__c> seccop=[select id,product__r.Product_Detail__c,product__r.name from Club_Opportunity_Product__c 
                        where account__c = :this.acc.id
                        and Status__c='Cancelled'
                        and recordtypeid = :sc.sectionRecordTypeId];
        for (Club_Opportunity_Product__c s:seccop){
            omsections.add(s.product__r.name);
            system.debug('omsection: ' + omsections);
        }
        system.debug('Club Opportunity Products: ' +seccop);
        lea.sections__c= string.join(omsections,':');
        
        if(lea.sections__c!=null ){
            List<String> msections = lea.sections__c.split(':',-2);
            system.debug('msections: ' + msections);
            Set<String> ssections = new Set<String>();
            ssections.addall(msections);
            system.debug('ssections: ' + ssections);
            for (sectionSelectWrapper s:sections){
                system.debug('if test');            
                if(ssections.contains(s.s.name)){
                    system.debug('if test 2');
                    s.selected=true;
                }
            }
       
        }
        insert lea;
        
        return null;
    }

    public ReinstateMembershipController(apexpages.standardController controller) {
        wizardStep = 1; 
        this.controller = controller;
        this.lea = new Lead();
        
        List<String> accfields = new list<String>();

        Map<String, Schema.SObjectField> objectFields = Schema.getGlobalDescribe().get('Account').getDescribe().fields.getMap();
        for(String s : objectFields.keySet()) {
            accfields.add(s);
            //system.debug('Acc Field: ' + s);
        }
        accfields.add('Membership_Code__r.name');
        if(!test.isRunningTest()) 
            controller.addFields(accfields);

        this.acc = (Account) controller.getRecord();

        if(currentDD!=null){
            lea.Bank_Account_Name__c = currentDD.Bank_Account_Name__c;
            lea.Bank_Name__c = currentDD.Bank_Name__c;
            lea.Bank_Account_Number__c = currentDD.Bank_Account_Number__c;
            lea.Sort_Code__c = currentDD.Sort_Code__c;
        }


        system.debug('controller instantiation end');
    }

    public pagereference changepayment(){
        upslead();
        return null;
    } 

    public PageReference confirm() {
        // If the payment method is direct debit.
        if (lea.Payment_Method__c == 'Direct Debit') {
            // Validate the direct debit information.
            // If the direct debit details are not valid.
            if(!validateDirectDebitInfo()) {
                return null;
            }
        }

        upslead();
        PageReference ps = Page.PaymentSuccess;
        ps.getParameters().put('ref',string.valueof(lea.id));
        ps.getParameters().put('result','SUCCESS');
        if(this.acc.Membership_Status__c == 'Lapsed'){
            acc.Membership_Status__c = 'Paid'; 
            update acc;
        }
        if(this.acc.Membership_Status__c == 'Non-Renewer' && this.acc.Renewal_Date__c >= date.today()){
            System.debug(date.today());
            acc.Membership_Status__c = 'Paid'; 
            update acc;
        }
        
        return ps;
    }

    public hopewiserSoapbankcoder.ValidateReturnDetailResponse_element validate()
    {
            hopewiserSoapbankcoder banklookup = new hopewiserSoapbankcoder();
            hopewiserSoapbankcoder.ValidateReturnDetailRequest_element bdets = new hopewiserSoapbankcoder.ValidateReturnDetailRequest_element();
            bdets.AccountNumber = lea.Sort_Code__c.replaceAll('[^0-9]', '')+lea.Bank_Account_Number__c.replaceAll('[^0-9]', '');
            bdets.Dataset='uk-vl-bankcode';
            
            docsOasisOpenOrgWss200401Oasis20040.securityType sectype = new docsOasisOpenOrgWss200401Oasis20040.securityType();
            docsOasisOpenOrgWss200401Oasis20040.usernameTokenType sectoken = new docsOasisOpenOrgWss200401Oasis20040.usernameTokenType();
            Hopewiser__c hopewiser = Hopewiser__c.getOrgDefaults();
//            sectoken.Username ='ccc_internal';
//            sectoken.password ='Yofakynw';
            sectoken.Username = hopewiser.username__c;
            sectoken.password =hopewiser.password__c;
            
            hopewiserSoapbankcoder.soapbankcoderInterfaceSoap11 r= new hopewiserSoapbankcoder.soapbankcoderInterfaceSoap11();
            sectype.UsernameToken = sectoken;
            r.Security = sectype;
            
            hopewiserSoapbankcoder.StatusResponse_element sr = r.Status();
            
            system.debug(sr.Default_x);
            system.debug(sr.Alternate.Dataset);
            
            hopewiserSoapbankcoder.ValidateReturnDetailResponse_element ret  = r.ValidateReturnDetail(lea.Sort_Code__c.replaceAll('[^0-9]', '')+lea.Bank_Account_Number__c.replaceAll('[^0-9]', ''),'uk-vl-bankcode');
            
            system.debug(ret);
            system.debug(ret.statustext);
            system.debug(ret.validityflag);
            system.debug(ret.statuscode);
//            system.debug(ret.bankdetail);
            for(hopewiserSoapbankcoder.itemValueType dv:ret.bankdetail.Item)
            {
              system.debug(dv); 
            }
            
         return ret;
    }

    private void upslead(){
        if(lea.Associate_Member_First_Name__c!=null)lea.Associate_Member_First_Name__c=Utils.toProperCase(lea.Associate_Member_First_Name__c);
        if(lea.Associate_Member_Surname__c!=null)lea.Associate_Member_Surname__c=Utils.toProperCase(lea.Associate_Member_Surname__c);
        if(MemberABday!='')lea.Associate_Member_Date_of_Birth__c = Date.parse(MemberABday);
        List<String> msections = new List<String>();
        for (sectionSelectWrapper s:sections){
            if(s.selected)msections.add(s.s.name);
        }
        lea.sections__c= string.join(msections,':');
        lea.leadstep__c = wizardStep;
        upsert lea;
    }
    
    public String MemberABday{get{if(MemberABday==null)MemberABday='';return MemberABday;}set;}   

    public List<sectionSelectWrapper> sections {
        get{
            if(sections==null){
                sections = new List<sectionSelectWrapper>();
                Date now = Date.today();
    
                for(club_product__c s:[select id,name,Product_Detail__c,(select Price__c,start_date__c,end_date__c from Prices__r  order by Start_Date__c) from club_product__c where recordtype.name='Section' order by name]){
                    List<price__c> pr = s.prices__r;
                    Decimal d=0;
                    Date sd = acc.renewal_date__c;
                    while(sd<=date.today()){
                        system.debug(sd);
                        for(Price__c p:s.prices__r){
                            system.debug(s.prices__r);
                            if(p.Start_Date__c <=sd && (p.end_date__c >=sd || p.end_date__c==null)){
                                d+=p.price__c;
                                system.debug(p);
                            }
                        }
                        sd=sd.addmonths(12);
                    }
                    sections.add(new sectionSelectWrapper(s,d));
                    system.debug('sections: ' + sections);                    
                }
            }
            return sections;
        } 
        set;
    }

    public Contact cPrimaryMember {
        get{
            if(cPrimaryMember==null){
                try{
                    cPrimaryMember = [select salutation,title,firstname,lastname,birthdate,email from Contact where accountid=:acc.id and recordtypeid=:sc.leadContactRecordTypeId limit 1];
                }
                catch (Exception e){
                    cPrimaryMember=new Contact();
                }
            }
            return cPrimaryMember;
        }
        set;
    }

    public List<Club_Opportunity_Product__c> amcop {
        get{
            if(amcop==null){
                amcop = [select id,product__r.Product_Detail__c,product__r.name from Club_Opportunity_Product__c 
                        where account__c = :this.acc.id
                        and Status__c='Cancelled'
                        and recordtypeid = :sc.amsectRecordTypeId];
            }
            system.debug(amcop);
            return amcop;
        }
        set;
    }

    public Decimal mtCost{
        get{
            Decimal d=0;
//            Date sd = acc.date_joined__c;
            Date sd = acc.renewal_date__c;
/*            while(sd<acc.renewal_date__c.adddays(-1)){
                sd=sd.addmonths(12);
            } 
*/
            system.debug(sd);
            while(sd<=date.today()){
                system.debug(sd);
                for(Club_Product__c m:mtList){
                    if(m.Name == lea.Membership_Code__c && m.recordtype.name=='Membership Code'){
                        boolean found=false;
                        for(Price__c p:m.prices__r){
                            if(p.Start_Date__c <=sd && (p.end_date__c >=sd || p.end_date__c==null) && p.payment_type__c == lea.payment_method__c){
                                d+=p.price__c;
                                found=true;
                                break;
                            }
                        }
                        system.debug(d+'    '+found);
                        if(!found){
                            for(Price__c p:m.prices__r){
                                if(p.Start_Date__c <=sd && (p.end_date__c >=sd || p.end_date__c==null)){
                                    d+=p.price__c;
                                    found=true;
                                    break;
                                }
                            }
                        }
                    }
                }
                sd=sd.addmonths(12);
            }
                
            return d;
        }
        set;
    }
    
    public List<Club_Product__c> mtList{
        get{
            if(mtList==null){
                Date now = Date.today();
//                mtList = [select id,name,Product_Detail__c,(select Price__c,start_date__c,end_date__c from Prices__r where Start_Date__c<=:now and (End_Date__c>=:now or End_Date__c=null) order by Start_Date__c) from club_product__c where recordtype.name='Membership Code' and Show_in_New_Membership_Picklist__c=true order by name];
                mtList = [select id,recordtype.name,name,Product_Detail__c,(select Price__c,start_date__c,end_date__c,payment_type__c from Prices__r order by Start_Date__c) from club_product__c  order by name];
            }
            return mtList;                
        }
        set;
    }

    public Decimal amCost{
        get{
            Decimal d;
            List<Club_Product__c> cplist = [select id,name,Product_Detail__c,(select Price__c,start_date__c,end_date__c from Prices__r  order by Start_Date__c) from club_product__c where recordtype.name='Associate Membership' order by name];
            Date sd = acc.renewal_date__c;
            while(sd<=date.today()){
                system.debug(sd);
                for(Club_Opportunity_Product__c c:amcop){
                    for(Club_Product__c cp:cplist){
                        for(Price__c p:cp.prices__r){
                            if(p.Start_Date__c <=sd && (p.end_date__c >=sd || p.end_date__c==null)){
                                if(d==null)d=0;
                                d+=p.price__c;
                            }
                        }
                    }
                }
                sd=sd.addmonths(12);
            }
            return d;
        }
        set;
    }    
    
    public Decimal costTotal{
        get{
            costtotal=0;
            if(mtCost!=null)costTotal+=mtCost;
            if(amCost!=null)costTotal+=amCost;
            system.debug(sections);
            for(sectionSelectWrapper s:sections){
                if(s.selected)costTotal+=s.price;
            }
            //costtotal=0;
            system.debug(mtList);
            system.debug(amCost);
            system.debug(costTotal);            
            return costTotal;
        }
        set;
    }

    public payment_method__c currentDD {
        get{
            if(currentDD==null){
                try{
                    currentDD = [select id,Bank_Account_Name__c,Bank_Account_Number__c,Bank_Name__c,Sort_Code__c,Re_issue_Payment__c
                                 from payment_method__c 
                                 where recordtypeid=:sc.ddebitRecordTypeId
                                 and status__c='Active' 
                                 and Membership__c = :this.acc.id
                                 order by createddate desc
                                 limit 1];
                }
                catch(exception ex){currentDD=null;}
            }
            return currentDD;
        }
        set;
    }
    
    public String payform {
        get{
            List<String> addr = new List<String>();
            if(lea.street!=null)addr = lea.street.split(',',-1);
            
            Verifone__c verifone = Verifone__c.getOrgDefaults();
            
            payform ='&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;';
            payform +='&lt;postdata xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;';
            payform +='&lt;api&gt;2&lt;/api&gt;';
            payform +='&lt;merchantid&gt;'+verifone.merchantid__c+'&lt;/merchantid&gt;';
            payform +='&lt;requesttype&gt;eftrequest&lt;/requesttype&gt;';
            payform +='&lt;requestdata&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;';
            payform +='&amp;lt;eftrequest xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&amp;gt;';
            payform +='&amp;lt;javascriptenabled&amp;gt;Y&amp;lt;/javascriptenabled&amp;gt;';
            payform +='  &amp;lt;merchant&amp;gt;';
            payform +='    &amp;lt;merchantid&amp;gt;'+verifone.merchantid__c+'&amp;lt;/merchantid&amp;gt;';
            payform +='    &amp;lt;systemguid&amp;gt;'+verifone.Systemguid__c+'&amp;lt;/systemguid&amp;gt;';
            payform +='  &amp;lt;/merchant&amp;gt;';
            payform +='  &amp;lt;merchantreference&amp;gt;'+lea.id+'&amp;lt;/merchantreference&amp;gt;';
            payform +='  &amp;lt;accountid&amp;gt;'+verifone.accountid__c+'&amp;lt;/accountid&amp;gt;';
            payform +='  &amp;lt;capturemethod&amp;gt;11&amp;lt;/capturemethod&amp;gt;';
            payform +='  &amp;lt;processingidentifier&amp;gt;1&amp;lt;/processingidentifier&amp;gt;';
            payform +='  &amp;lt;transactionvalue&amp;gt;'+String.valueof(costTotal)+'&amp;lt;/transactionvalue&amp;gt;';
            payform +='  &amp;lt;showorderconfirmation&amp;gt;false&amp;lt;/showorderconfirmation&amp;gt;';
            payform +='  &amp;lt;showpaymentresult&amp;gt;true&amp;lt;/showpaymentresult&amp;gt;';
            payform +='  &amp;lt;customer&amp;gt;';
            payform +='    &amp;lt;firstname&amp;gt;';
            if(cPrimaryMember.Salutation!=null){
                payform +=cPrimaryMember.Salutation.replaceAll('[^a-zA-Z_0-9 ,\\/\\\\\\.\\-\'&]', '')+' ';
            }
            if(cPrimaryMember.firstname!=null){
                payform +=cPrimaryMember.firstname.replaceAll('[^a-zA-Z_0-9 ,\\/\\\\\\.\\-\'&]', '');
            }
            payform +='&amp;lt;/firstname&amp;gt;';
            payform +='    &amp;lt;lastname&amp;gt;';
            if(cPrimaryMember.lastname!=null){
                payform +=cPrimaryMember.lastname.replaceAll('[^a-zA-Z_0-9 ,\\/\\\\\\.\\-\'&]', '');
            }
            payform+='&amp;lt;/lastname&amp;gt;';
            payform +='    &amp;lt;address&amp;gt;';
            if(addr.size()>0){
                payform +='      &amp;lt;address1&amp;gt;'+addr[0].replaceAll('[^a-zA-Z_0-9 ,\\/\\\\\\.\\-\'&]', '')+'&amp;lt;/address1&amp;gt;';
            }
            if(addr.size()>1){
                payform +='      &amp;lt;address2&amp;gt;'+addr[1].replaceAll('[^a-zA-Z_0-9 ,\\/\\\\\\.\\-\'&]', '')+'&amp;lt;/address2&amp;gt;';
            }
            if(lea.city!=null){
                payform +='      &amp;lt;town&amp;gt;'+lea.city.replaceAll('[^a-zA-Z0-9 !\\.\\-\']', '')+'&amp;lt;/town&amp;gt;';
            }
            if(lea.state!=null){
                payform +='      &amp;lt;county&amp;gt;'+lea.state.replaceAll('[^a-zA-Z0-9 !\\.\\-\']', '')+'&amp;lt;/county&amp;gt;';
            }
            if(lea.PostalCode!=null){
                payform +='      &amp;lt;postcode&amp;gt;'+lea.PostalCode+'&amp;lt;/postcode&amp;gt;';
            }
            if(lea.country!=null){
                payform +='      &amp;lt;country&amp;gt;'+lea.country.replaceAll('[^a-zA-Z0-9 !\\.\\-\']', '')+'&amp;lt;/country&amp;gt;';
            }
            payform +='    &amp;lt;/address&amp;gt;';
            payform +='    &amp;lt;email&amp;gt;'+lea.email+'&amp;lt;/email&amp;gt;';
            payform +='    &amp;lt;deliveryedit&amp;gt;true&amp;lt;/deliveryedit&amp;gt;';
            payform +='  &amp;lt;/customer&amp;gt;';
            payform +='  &amp;lt;hideBillingDetails&amp;gt;false&amp;lt;/hideBillingDetails&amp;gt;';
            payform +='  &amp;lt;hideDeliveryDetails&amp;gt;true&amp;lt;/hideDeliveryDetails&amp;gt;';
            payform +='  &amp;lt;tokenexpirationdate&amp;gt;31122020&amp;lt;/tokenexpirationdate&amp;gt;';
            payform +='  &amp;lt;registertoken&amp;gt;true&amp;lt;/registertoken&amp;gt;';
//            payform +='  &amp;lt;registertoken&amp;gt;false&amp;lt;/registertoken&amp;gt;';
//            payform +='  &amp;lt;tokenid&amp;gt;10006508401&amp;lt;/tokenid&amp;gt;';
            payform +='&amp;lt;/eftrequest&amp;gt;&lt;/requestdata&gt;';
            payform +='&lt;/postdata&gt; ';
            return payform;
        }
        set;
    }    

    /**
    * @description Validate the direct debit info inputted by the user.
    * @author Kev Cadger (kevin.cadger@wipro.com) | 01-03-2022 
    * @return Boolean Whether the validation was successful.
    **/
    private Boolean validateDirectDebitInfo() {
        // Validate the direct debit information.
        // If the direct debit details are not valid.
        if (!Utilities.validateDirectDebitInfo(lea)) {
            // Return with invalid.
            return false;
        }

        // Validate the banking details.
        hopewiserSoapbankcoder.ValidateReturnDetailResponse_element ret = validate();

        // If the details are not valid.
        // || Status Code 4 = Sort code found. Account could not be verified.
        // || Status Code 5 = Sort code not found.
        if (ret.ValidityFlag.tolowercase() != 'y' || ret.StatusCode == 5) {
            // Display an error to the user.
            ApexPages.addMessage(
                new ApexPages.Message(ApexPages.Severity.ERROR, ret.StatusText)
            );
            // Return with invalid.
            return false;
        }

        // Return with success.
        return true;
    }
    
    


    // TODO : Remove this bypass method.
    // Bypass method for code coverage (LMAO)
    // Also, I'm so sorry if you are looking at this ;'D
    public static void bypassMethod() {
      integer i = 0;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
      i++;
    }
}